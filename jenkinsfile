@Library('my-shared-library') _

pipeline {
  

  agent any
  /*
  tools {

  // Global Tool Configuration

  maven 'maven-3.9'


  }

  */
  parameters{
  	choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
    string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '396343469010')
    string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
    string(name: 'ECR_REPO_NAME', description: "Name of the ECR", defaultValue: 'checking_0402')
    string(name: 'cluster', description: "Name of the EKS Cluster", defaultValue: 'my-demo-ep')
  }
   
  environment{

        ACCESS_KEY = credentials('Access_key_ID')
        SECRET_KEY = credentials('Secret_Access_key')
    }


  stages{

        // when { expression {  params.action == 'create' } }
     
    stage('Git CheckOut') {

       when { expression {  params.action == 'create' } }

      steps{
      
      gitCheckOut(

        branch: "main",

        url: "https://github.com/vikashmuktha/E2E-Jenkinsfile-ECR-Mr.DevOps.git"

      )

      }


    }
        
    stage('Unit Test'){

       when { expression {  params.action == 'create' } }

      steps{

        script{

        mvnTest()
        
        }
        
      }
    }
    
    stage('Integration Test'){

       when { expression { params.action == 'create' } }

      steps{

        script{

          mvnIntegrationTest()

        }
      }
    }
    
    stage ('Static Code Analysis') {

      

       when { expression { params.action == 'create' } }

      steps{

        script {

          def SonarQubecredentialsId = 'sonar-secret-1'
            statiCodeAnalysis(SonarQubecredentialsId)
                           
        }

      }

    }  
    /*
    stage ('Quality Gate Analysis') {

         when { expression { params.action == 'create' } }

      steps {

          script {

            def SonarQubecredentialsId = 'sonar-secret-1'
            QualityGateStatus(SonarQubecredentialsId)

          }
      }
    }
    */
    stage ('Maven Build') {

      when { expression { params.action == 'create' } }

      steps {

        script {

          mvnBuild()
        }
      }
    }
    
    stage('Docker Image Build: ECR') {

      when { expression { params.action == 'create' } }

      steps {

        script {

          dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")

        }
      }
    }

    stage('Image Scan To our Image') {

      when { expression { params.action == 'create' } }

      steps {

        script {

          dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")


        }
      }
    }
    
    stage('Image Push to ECR') {

      when { expression { params.action == 'create' } }
      
      steps {

        script {

          dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")

        }
      }
    }
    /* 
    stage('Image CleanUp in ECR') {

      when { expression { params.action == 'create' } }

      steps {

        script {

          dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")

        }
      }
    }
    */

    stage('Connect to EKS cluster') {

        when { expression { params.action == 'create' } }

      steps {

        script {

           sh """
                aws configure set aws_access_key_id "$ACCESS_KEY"
                aws configure set aws_secret_access_key "$SECRET_KEY"
                aws configure set region "${params.Region}"
                aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}
           """

        }
      }
    }

    stage('Deploy App in EKS') {

      when { expression {params.action == 'create' } }

      steps {

        script {

          def apply = false

          try{
            input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
            apply = true
          }catch(err){
            apply= false
            currentBuild.result  = 'UNSTABLE'
            }
          if(apply){

            sh """
              kubectl apply -f .
            """
          }  
        }
      }
    }
    

  }

}
